// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# API for managing programmes in the Programme Development Unit
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://localhost:8080/programme") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Add a new programme
    #
    # + payload - Programme object to be added
    # + return - Programme added successfully 
    resource isolated function post addProgramme(Programme payload) returns string|error {
        string resourcePath = string `/addProgramme`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        string response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieve all programmes
    #
    # + return - A list of all programmes 
    resource isolated function get allProgrammes() returns json|error {
        string resourcePath = string `/allProgrammes`;
        json response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve a programme by code
    #
    # + return - Programme details 
    resource isolated function get programme/[string programmeCode]() returns Programme|error {
        string resourcePath = string `/programme/${getEncodedUri(programmeCode)}`;
        Programme response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Update a programme by code
    #
    # + payload - Programme object with updated information
    # + return - Programme updated successfully 
    resource isolated function put programme/updateProgramme/[string programmeCode](Programme payload) returns string|error {
        string resourcePath = string `/programme/updateProgramme/${getEncodedUri(programmeCode)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        string response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Delete a programme by code
    #
    # + return - Programme deleted successfully 
    resource isolated function delete programme/deleteProgramme/[string programmeCode]() returns string|error {
        string resourcePath = string `/programme/deleteProgramme/${getEncodedUri(programmeCode)}`;
        string response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve all programmes due for review
    #
    # + return - A list of programmes due for review 
    resource isolated function get programmesDueForReview() returns json|error {
        string resourcePath = string `/programmesDueForReview`;
        json response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve all programmes by faculty
    #
    # + return - A list of programmes in the specified faculty 
    resource isolated function get programmesByFaculty/[string faculty]() returns json|error {
        string resourcePath = string `/programmesByFaculty/${getEncodedUri(faculty)}`;
        json response = check self.clientEp->get(resourcePath);
        return response;
    }
}
